// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	application "github.com/azaliaz/avito-shop/internal/application"
	gomock "go.uber.org/mock/gomock"
)

// MockShopService is a mock of ShopService interface.
type MockShopService struct {
	ctrl     *gomock.Controller
	recorder *MockShopServiceMockRecorder
}

// MockShopServiceMockRecorder is the mock recorder for MockShopService.
type MockShopServiceMockRecorder struct {
	mock *MockShopService
}

// NewMockShopService creates a new mock instance.
func NewMockShopService(ctrl *gomock.Controller) *MockShopService {
	mock := &MockShopService{ctrl: ctrl}
	mock.recorder = &MockShopServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopService) EXPECT() *MockShopServiceMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockShopService) Auth(ctx context.Context, request *application.AuthRequest) (*application.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, request)
	ret0, _ := ret[0].(*application.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockShopServiceMockRecorder) Auth(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockShopService)(nil).Auth), ctx, request)
}

// BuyItem mocks base method.
func (m *MockShopService) BuyItem(ctx context.Context, request *application.BuyItemRequest) (*application.BuyItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, request)
	ret0, _ := ret[0].(*application.BuyItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockShopServiceMockRecorder) BuyItem(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockShopService)(nil).BuyItem), ctx, request)
}

// GetInfo mocks base method.
func (m *MockShopService) GetInfo(ctx context.Context, request *application.GetInfoRequest) (*application.GetInfoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", ctx, request)
	ret0, _ := ret[0].(*application.GetInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockShopServiceMockRecorder) GetInfo(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockShopService)(nil).GetInfo), ctx, request)
}

// SendCoin mocks base method.
func (m *MockShopService) SendCoin(ctx context.Context, request *application.SendCoinRequest) (*application.SendCoinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", ctx, request)
	ret0, _ := ret[0].(*application.SendCoinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockShopServiceMockRecorder) SendCoin(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockShopService)(nil).SendCoin), ctx, request)
}
