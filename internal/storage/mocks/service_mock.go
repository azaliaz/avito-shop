// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=./mocks/service_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	storage "github.com/azaliaz/avito-shop/internal/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockShopStorage is a mock of ShopStorage interface.
type MockShopStorage struct {
	ctrl     *gomock.Controller
	recorder *MockShopStorageMockRecorder
}

// MockShopStorageMockRecorder is the mock recorder for MockShopStorage.
type MockShopStorageMockRecorder struct {
	mock *MockShopStorage
}

// NewMockShopStorage creates a new mock instance.
func NewMockShopStorage(ctrl *gomock.Controller) *MockShopStorage {
	mock := &MockShopStorage{ctrl: ctrl}
	mock.recorder = &MockShopStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopStorage) EXPECT() *MockShopStorageMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockShopStorage) Auth(ctx context.Context, request *storage.AuthRequest) (*storage.AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, request)
	ret0, _ := ret[0].(*storage.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockShopStorageMockRecorder) Auth(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockShopStorage)(nil).Auth), ctx, request)
}

// BuyItem mocks base method.
func (m *MockShopStorage) BuyItem(ctx context.Context, request *storage.BuyItemRequest) (*storage.BuyItemResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyItem", ctx, request)
	ret0, _ := ret[0].(*storage.BuyItemResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuyItem indicates an expected call of BuyItem.
func (mr *MockShopStorageMockRecorder) BuyItem(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyItem", reflect.TypeOf((*MockShopStorage)(nil).BuyItem), ctx, request)
}

// GetBalance mocks base method.
func (m *MockShopStorage) GetBalance(ctx context.Context, userId uint64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockShopStorageMockRecorder) GetBalance(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockShopStorage)(nil).GetBalance), ctx, userId)
}

// GetCoinHistory mocks base method.
func (m *MockShopStorage) GetCoinHistory(ctx context.Context, userId uint64) (*storage.CoinHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoinHistory", ctx, userId)
	ret0, _ := ret[0].(*storage.CoinHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCoinHistory indicates an expected call of GetCoinHistory.
func (mr *MockShopStorageMockRecorder) GetCoinHistory(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoinHistory", reflect.TypeOf((*MockShopStorage)(nil).GetCoinHistory), ctx, userId)
}

// GetInventory mocks base method.
func (m *MockShopStorage) GetInventory(ctx context.Context, userId uint64) ([]*storage.ProductStock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", ctx, userId)
	ret0, _ := ret[0].([]*storage.ProductStock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockShopStorageMockRecorder) GetInventory(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockShopStorage)(nil).GetInventory), ctx, userId)
}

// SendCoin mocks base method.
func (m *MockShopStorage) SendCoin(ctx context.Context, request *storage.SendCoinRequest) (*storage.SendCoinResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCoin", ctx, request)
	ret0, _ := ret[0].(*storage.SendCoinResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendCoin indicates an expected call of SendCoin.
func (mr *MockShopStorageMockRecorder) SendCoin(ctx, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCoin", reflect.TypeOf((*MockShopStorage)(nil).SendCoin), ctx, request)
}
